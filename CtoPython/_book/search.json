[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "CtoPython",
    "section": "",
    "text": "Preface\nEl lenguaje de programación de C, es uno de los lenguajes más antiguos (Salio en 1969)"
  },
  {
    "objectID": "new_rules.html#el-punto-y-coma-.",
    "href": "new_rules.html#el-punto-y-coma-.",
    "title": "1  Nuevo lenguaje, nuevas reglas.",
    "section": "1.1 El punto y coma ;.",
    "text": "1.1 El punto y coma ;.\nEn C, el punto y coma ; es ley y me atrevo a opinar que es el mayor causante errores de compilacion. Pues bien, en Python estos desaparecen por “completo”.\nNotamos entonces que la función print() de Python, (la única línea del código de Python) no posee un punto y coma, a pesar que su “similar” en C printf() si lo tiene.\nEl punto y coma no te generará error, ya que puede usarse para separar líneas de código. En general, para tus códigos de Python, puedes prescindir del ;."
  },
  {
    "objectID": "new_rules.html#las-llaves-.",
    "href": "new_rules.html#las-llaves-.",
    "title": "1  Nuevo lenguaje, nuevas reglas.",
    "section": "1.2 Las llaves {}.",
    "text": "1.2 Las llaves {}.\nEn la función int main() notamos que su contenido encuentra encerrado por llaves {}. Esto se aplica para funciones creadas por el usuario y para las funciones por defecto (for(), switch(), entre otros). En Python, las llaves desaparecen por “completo”, entonces es sencillo preguntarse ¿Cómo Python delimita las funciones?.\n\n1.2.1 Dos puntos :\nAsí como en C, el punto y coma ; es ley. En Python es el dos puntos :, pero se usa de forma diferente, en las funciones básicas. Por ejemplo\n\nEn C tenemos for(...){\nEn Python tenemos for[...]:."
  },
  {
    "objectID": "new_rules.html#for-en-python",
    "href": "new_rules.html#for-en-python",
    "title": "1  Nuevo lenguaje, nuevas reglas.",
    "section": "1.3 for en Python",
    "text": "1.3 for en Python\nEl for en Python no usa corchetes [], solo señala que hay algo antes de los dos puntos, más adelante veremos como se traslada el for de C a Python."
  },
  {
    "objectID": "new_rules.html#pep-8",
    "href": "new_rules.html#pep-8",
    "title": "1  Nuevo lenguaje, nuevas reglas.",
    "section": "1.4 PEP-8",
    "text": "1.4 PEP-8\nAlgo importante a la hora de programar son tres cosas.\n\nReproducibilidad. (Funcione en cualquier parte)\nClaridad (Se entienda que esta pasanddo)\nFacil de Leer.\n\nEn el caso de C, no hay reglas sobre como escribir un código más alla de la que se pueden encontrar en libros como “Clean Code” de Robert C.Martin.\nPor el lado de Python, existe un proyecto llamado PEP-8 (https://peps.python.org/pep-0008/), en el que se estipulo un formato para un código de Python. Su relevancia es tal que, por ejemplo en un IDE de Python (PyCharm, más adelante hablaremos de él) puede configurarse para que, mediante advertencias, su código vaya tomando el formato PEP-8."
  },
  {
    "objectID": "structure.html#el-préambulo.",
    "href": "structure.html#el-préambulo.",
    "title": "2  Estructura de un Código.",
    "section": "2.1 El préambulo.",
    "text": "2.1 El préambulo.\nDe forma básica, el preámbulo es lo que se encuentra fuera del int main(){...}. Donde encontramos\n\n#include&lt;...&gt;.\n#define.\nstruct{...}\nFunciones creada por el usuario.\n\n\n2.1.1 #include&lt;...&gt;\nEn C, el comando #include se usa para llamar librerías nativas y funciones creadas por el usuario. Por el lado de Python esto se realiza mediante dos “funciones” import y from, creadas para cumplir con las necesidades del lenguaje. La “función” from se verá en el apartado “Novedades interesantes de Python” más adelante. Por el momento nos centraremos en import.\nLa función import es la que se encarga de llamar las librerías nativas de Python y las funciones creadas por el desarrollador. Teniendo el siguiente formato.\nimport name\nUna vez la librería es cargada, al usar una de sus funciones, indicarle a Python de donde la estamos sacando. Por ejemplo, si tengo una librería llamada ‘algebra_lineal’, y tengo una función para la factorización LU, llamada ‘FLU’. En el código deberá aparecer algo como: algebra_lineal.FLU(…), lo cual no era necesario en C y aparte la escritura puede ser más lenta cuando las librerías tienen nombres largos. Lo cual es cierto, sin embargo hay dos cosas a comentar:\nDeclarar la librería de origen permite tener funciones con el mismo nombre. Algo que en puede causar muchos problemas e incomodidades en C según el contexto, y La función import posee un parámetro opcional en el que nos permite asignar una abreviatura a la librería. Por ejemplo, con la librería ‘algebra_lineal’ y la función ‘FLU’\nimport algebra_lineal as aL\ny = aL.FLU(A)\nMás adelante detallaremos elementos como ‘y’, entonces notamos que al agregar as y una abreviatura, no necesitamos poner todo el nombre de la librería para llamar una función. Esto funciona de igual manera para las librerías nativas.\nComo última cosa a mencionar como diferencia entre #include e import es que en C requerimos un script tipo C (.c) y otro tipo header (.h) para poder hacer la llamada, en Python solo se requiere el script de la librería (.py). Más adelante mencionaremos las bondades que tiene la función import a la hora de programar."
  },
  {
    "objectID": "structure.html#define",
    "href": "structure.html#define",
    "title": "2  Estructura de un Código.",
    "section": "2.2 #define",
    "text": "2.2 #define\nAl no haber una función principal (int main(){...}), no son necesarias las constantes globales tipo #define como es en C, por lo tanto “desaparecen” dentro del lenguaje Python."
  },
  {
    "objectID": "structure.html#struct",
    "href": "structure.html#struct",
    "title": "2  Estructura de un Código.",
    "section": "2.3 struct",
    "text": "2.3 struct\nMás adelante veremos la alternativa de struct, al estar apenas notando las primeras diferencias, por el momento les basta saber que existe.\n\n2.3.1 El contenido.\nSabemos que un script en C no es más que una función entera llamada ‘main’ (int main(){...}). En Python no se requiere una función para ejecutar el código escrito. Siendo necesario el clásico return 0 de C."
  }
]